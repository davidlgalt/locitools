# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LociTools
                                 A QGIS plugin
 Various tools created by LociGeo.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-08-26
        copyright            : (C) 2019 by LociGeo
        email                : davidlgalt.gis@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'LociGeo'
__date__ = '2019-08-26'
__copyright__ = '(C) 2019 by LociGeo'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import (QCoreApplication, QVariant)

from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsVectorLayer,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterString,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterFeatureSink,
                       QgsMessageLog,
                       QgsApplication,
                       QgsFeatureRequest,
                       QgsField,
                       QgsFeature,
                       Qgis,
                       QgsProject)
import processing


class AddQuantileAttributesAlgorithm(QgsProcessingAlgorithm):
    """
    This algorithm creates a new field, computes a rank to each feature, 
    and then sets the attrubute value of the new field to that rank.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'       # Output vector file
    QFIELD = 'QFIELD'       # Field quartiles are based on
    RFIELD = 'RFIELD'       # Field where quantile ranking is generated
    QNUM = 'QNUM'           # Number of quartiles
    NFIELD = 'NFIELD'       # optional field used to normalize QFIELD
    INPUT = 'INPUT'         # Input vector file
    AGGBYAREA = 'AGGBYAREA' # Aggregate by area (boolean)
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        # Quantile Source Field
        self.addParameter(
            QgsProcessingParameterField(
                self.QFIELD,
                self.tr('Quantile Field'),
                parentLayerParameterName='INPUT',
                defaultValue='',
            )
        )

        # Quantile Destination Field
        self.addParameter(
            QgsProcessingParameterString(
                self.RFIELD,
                self.tr('Rank Field'),
                defaultValue='QUANTILE_RANK',
            )
        )

        # Quantile Quantity
        self.addParameter(
            QgsProcessingParameterNumber(
                self.QNUM,
                self.tr('Number of Quantiles'),
                defaultValue=10,
            )
        )

        # Normalizing Field
        self.addParameter(
            QgsProcessingParameterField(
                self.NFIELD,
                self.tr('Normalizing Field'),
                parentLayerParameterName='INPUT',
                defaultValue=None,
                optional=True,
            )
        )

        # Aggregate by Area
        self.addParameter(
            QgsProcessingParameterBoolean(
                self.AGGBYAREA,
                self.tr('Aggregate quantiles by area (True) or feature count (False)'),
                defaultValue=False,
                optional=True,
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context)
        qnum = parameters['QNUM']
        qfield = parameters['QFIELD']
        rfield = parameters['RFIELD']
        nfield = parameters['NFIELD']
        aggbyarea = parameters['AGGBYAREA']

        layer_in = self.parameterAsVectorLayer(parameters, self.INPUT, context)

        # Order by Quantile Field(s) using processing tool
        layer = processing.run("native:orderbyexpression", {'INPUT': layer_in, #parameters['INPUT'],
                                                              'EXPRESSION': '\"' + qfield + '\"', 
                                                              'ASCENDING': True, 
                                                              'NULLS_FIRST': False, 
                                                              'OUTPUT': 'TEMPORARY_OUTPUT'})['OUTPUT']

        layer.startEditing()

        if layer.isValid():
            QgsMessageLog.logMessage(
                "LAYER IS VALID", 'Quantile Plugin', level=Qgis.Info)
        else:
            QgsMessageLog.logMessage(
                "LAYER IS NOT VALID", 'Quantile Plugin', level=Qgis.Info)
        
        #Add Quantile Rank Field
        pr = layer.dataProvider()
        attr = pr.addAttributes([QgsField(rfield, QVariant.Int)])
        layer.updateFields()
        #fields = layer.fields()
        #poly = QgsFeature()
        #poly.setFields(fields, True)
        idxQField = layer.fields().indexFromName(qfield)
        idxRField = layer.fields().indexFromName(rfield)

        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            layer.fields(),
            source.wkbType(),
            source.sourceCrs())

        # Set order by clause
        clause = QgsFeatureRequest.OrderByClause(qfield, ascending=True)
        orderby = QgsFeatureRequest.OrderBy([clause])
        request = QgsFeatureRequest()
        request.setOrderBy(orderby)

        # Get feature count, feature count where value = 0, and percent zeros
        count = 0
        zero_count = 0
        area_tot = 0
        for feature in layer.getFeatures(request):
            count += 1
            attrs = feature.attributes()
            if attrs[1] == 0:
                zero_count += 1
            if aggbyarea:    
                geom = feature.geometry()
                area_tot += geom.area()
        if aggbyarea:
            area_per_quantile = area_tot / qnum
            feedback.pushInfo("Area per Quantile: " + str(area_per_quantile))

        percent_zeros = int(1000*zero_count/count)/10

        # Order by qfield and then set rank in rfield. If rank has changed
        # but value is the same as previous record, apply previous rank so
        # that the same value is not in two separate ranks.
        i = 0
        duplicate_ranks = 0
        attr_last = ''
        features_per_quantile = count / qnum
        
        rank_last=1
        area_sum = 0
        # Iterate through features adding attribute values for rank/quantile
        for feature in layer.getFeatures(request):
            i += 1
            if aggbyarea:
                rank = int(qnum * area_sum / area_tot) + 1
            else:
                rank = int(i / features_per_quantile) + 1
            attrs = feature.attributes()
            if attrs[idxQField] != attr_last and i != 0:
                x = layer.changeAttributeValue(feature.id(), idxRField, rank)
                rank_last = rank
                attr_last = attrs[idxQField]
            else:
                x = layer.changeAttributeValue(feature.id(), idxRField, rank_last)
                duplicate_ranks += 1     
            if aggbyarea:
                geom = feature.geometry()
                area_sum += geom.area()
            
        
            
            
        
        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / layer.featureCount() if layer.featureCount() else 0
        features = layer.getFeatures()
        
        i=0
        
        for current, feature in enumerate(features):
            i+=1
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            #rank = int(i/features_per_quantile)+1
            #attrs = feature.attributes()
            #if attrs[idxQField] != attr_last and i != 0:
            #    layer.changeAttributeValue(feature.id(), idxRField, rank)
            #    rank_last = rank
            #    attr_last = attrs[idxQField]
            #else:
            #    layer.changeAttributeValue(feature.id(), idxRField, rank_last)
            #    duplicate_ranks += 1
            #feature.updateFields()

            # Add a feature in the sink
            sink.addFeature(feature, QgsFeatureSink.FastInsert)
        

            # Update the progress bar
            feedback.setProgress(int(current * total))

        
        #QgsMessageLog.logMessage('Feature count: ' + int(sink.featureCount()), 'Quantile Plugin', level=Qgis.Info)"""

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.

        return {self.OUTPUT: dest_id}
    

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Add Quantile Attributes'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Data Tools')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'data'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return AddQuantileAttributesAlgorithm()
