# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LociTools
                                 A QGIS plugin
 Various tools created by LociGeo.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-08-26
        copyright            : (C) 2019 by LociGeo
        email                : davidlgalt.gis@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'LociGeo'
__date__ = '2020-09-09'
__copyright__ = '(C) 2020 by LociGeo'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import (QCoreApplication, QVariant)

from qgis.core import (QgsProcessing,
                       QgsVectorLayer,
                       QgsRasterLayer,
                       QgsMapLayer,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterRasterLayer,
                       QgsMessageLog,
                       QgsApplication,
                       QgsFeatureRequest,
                       Qgis,
                       QgsProject,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingParameterString,
                       QgsRasterPipe,
                       QgsRasterFileWriter,
                       QgsRasterProjector)
import processing
import ogr


class ExportRasterAlgorithm(QgsProcessingAlgorithm):
    """
    This algorithm creates a new field, computes a rank to each feature, 
    and then sets the attrubute value of the new field to that rank.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    LAYERINPUT = 'LAYERINPUT'         # Input layer
    GPKG = 'GPKG'
    LAYERNAME = 'LAYERNAME'
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.LAYERINPUT,
                self.tr('Input layer')                
            )
        )

        # We add a file output of type CSV.
        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.GPKG,
                self.tr('Output Geopackage'),
                'GPKG File (*.gpkg)',
            )
        )

        self.addParameter(
            QgsProcessingParameterString(
                self.LAYERNAME,
                'Layer Name'))

    def processAlgorithm(self, parameters, context, feedback):
        project = QgsProject.instance()

        layer_in = self.parameterAsRasterLayer(parameters, self.LAYERINPUT, context)
        gpkg = self.parameterAsFile(parameters, self.GPKG, context)
        layer_name = self.parameterAsString(parameters, self.LAYERNAME, context)

     #   self.exportRaster(layer_in, gpkg, layer_name)
        


   # def exportRaster(self, layer, db, layer_out):
        ds = ogr.Open(gpkg, True)
        pipe = QgsRasterPipe()
        provider=layer_in.dataProvider()

        file_writer = QgsRasterFileWriter(gpkg)
        file_writer.setOutputFormat('gpkg')
        file_writer.setCreateOptions([f"RASTER_TABLE={layer_name}", 'APPEND_SUBDATASET=YES'])
        
        if pipe.set(provider.clone()):
            projector = QgsRasterProjector()
            projector.setCrs(provider.crs(), provider.crs())
            if pipe.insert(2, projector) is True:
                if file_writer.writeRaster(pipe, provider.xSize(),provider.ySize(),provider.extent(),provider.crs()) == 0:
                      feedback.pushInfo(f"ok")
                else:
                      feedback.pushInfo(f"error: {file_writer.writeRaster(pipe, provider.xSize(),provider.ySize(),provider.extent(),provider.crs())}   {help(file_writer.setCreateOptions)}")
        ds = None

        return {}    

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Export Raster to Geopackage'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Data Tools')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'data'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ExportRasterAlgorithm()
